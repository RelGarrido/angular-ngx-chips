import { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants/index';
export const defaults = {
    tagInput: {
        separatorKeys: [],
        separatorKeyCodes: [],
        maxItems: Infinity,
        placeholder: PLACEHOLDER,
        secondaryPlaceholder: SECONDARY_PLACEHOLDER,
        validators: [],
        asyncValidators: [],
        onlyFromAutocomplete: false,
        errorMessages: {},
        theme: '',
        onTextChangeDebounce: 250,
        inputId: null,
        inputClass: '',
        clearOnBlur: false,
        hideForm: false,
        addOnBlur: false,
        addOnPaste: false,
        pasteSplitPattern: ',',
        blinkIfDupe: true,
        removable: true,
        editable: false,
        allowDupes: false,
        modelAsStrings: false,
        trimTags: true,
        ripple: true,
        tabIndex: '',
        disable: false,
        dragZone: '',
        onRemoving: undefined,
        onAdding: undefined,
        displayBy: 'display',
        identifyBy: 'value',
        animationDuration: {
            enter: '250ms',
            leave: '150ms'
        }
    },
    dropdown: {
        displayBy: 'display',
        identifyBy: 'value',
        appendToBody: true,
        offset: '50 0',
        focusFirstElement: false,
        showDropdownIfEmpty: false,
        minimumTextLength: 1,
        limitItemsTo: Infinity,
        keepOpen: true,
        dynamicUpdate: true,
        zIndex: 1000,
        matchingFn
    }
};
/**
 * @name matchingFn
 * @param this
 * @param value
 * @param target
 */
function matchingFn(value, target) {
    const targetValue = target[this.displayBy].toString();
    return targetValue && targetValue
        .toLowerCase()
        .indexOf(value.toLowerCase()) >= 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9tb2R1bGVzL2RlZmF1bHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQTBENUUsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHO0lBQ3BCLFFBQVEsRUFBbUI7UUFDdkIsYUFBYSxFQUFFLEVBQUU7UUFDakIsaUJBQWlCLEVBQUUsRUFBRTtRQUNyQixRQUFRLEVBQUUsUUFBUTtRQUNsQixXQUFXLEVBQUUsV0FBVztRQUN4QixvQkFBb0IsRUFBRSxxQkFBcUI7UUFDM0MsVUFBVSxFQUFFLEVBQUU7UUFDZCxlQUFlLEVBQUUsRUFBRTtRQUNuQixvQkFBb0IsRUFBRSxLQUFLO1FBQzNCLGFBQWEsRUFBRSxFQUFFO1FBQ2pCLEtBQUssRUFBRSxFQUFFO1FBQ1Qsb0JBQW9CLEVBQUUsR0FBRztRQUN6QixPQUFPLEVBQUUsSUFBSTtRQUNiLFVBQVUsRUFBRSxFQUFFO1FBQ2QsV0FBVyxFQUFFLEtBQUs7UUFDbEIsUUFBUSxFQUFFLEtBQUs7UUFDZixTQUFTLEVBQUUsS0FBSztRQUNoQixVQUFVLEVBQUUsS0FBSztRQUNqQixpQkFBaUIsRUFBRSxHQUFHO1FBQ3RCLFdBQVcsRUFBRSxJQUFJO1FBQ2pCLFNBQVMsRUFBRSxJQUFJO1FBQ2YsUUFBUSxFQUFFLEtBQUs7UUFDZixVQUFVLEVBQUUsS0FBSztRQUNqQixjQUFjLEVBQUUsS0FBSztRQUNyQixRQUFRLEVBQUUsSUFBSTtRQUNkLE1BQU0sRUFBRSxJQUFJO1FBQ1osUUFBUSxFQUFFLEVBQUU7UUFDWixPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxFQUFFO1FBQ1osVUFBVSxFQUFFLFNBQVM7UUFDckIsUUFBUSxFQUFFLFNBQVM7UUFDbkIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsVUFBVSxFQUFFLE9BQU87UUFDbkIsaUJBQWlCLEVBQUU7WUFDZixLQUFLLEVBQUUsT0FBTztZQUNkLEtBQUssRUFBRSxPQUFPO1NBQ2pCO0tBQ0o7SUFDRCxRQUFRLEVBQTJCO1FBQy9CLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFlBQVksRUFBRSxJQUFJO1FBQ2xCLE1BQU0sRUFBRSxNQUFNO1FBQ2QsaUJBQWlCLEVBQUUsS0FBSztRQUN4QixtQkFBbUIsRUFBRSxLQUFLO1FBQzFCLGlCQUFpQixFQUFFLENBQUM7UUFDcEIsWUFBWSxFQUFFLFFBQVE7UUFDdEIsUUFBUSxFQUFFLElBQUk7UUFDZCxhQUFhLEVBQUUsSUFBSTtRQUNuQixNQUFNLEVBQUUsSUFBSTtRQUNaLFVBQVU7S0FDYjtDQUNKLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILFNBQVMsVUFBVSxDQUF5QixLQUFhLEVBQUUsTUFBZ0I7SUFDdkUsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV0RCxPQUFPLFdBQVcsSUFBSSxXQUFXO1NBQzVCLFdBQVcsRUFBRTtTQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgVmFsaWRhdG9yRm4sIEFzeW5jVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5pbXBvcnQgeyBTRUNPTkRBUllfUExBQ0VIT0xERVIsIFBMQUNFSE9MREVSIH0gZnJvbSAnLi9jb3JlL2NvbnN0YW50cy9pbmRleCc7XHJcbmltcG9ydCB7IFRhZ0lucHV0RHJvcGRvd24gfSBmcm9tICcuL2NvbXBvbmVudHMvZHJvcGRvd24vdGFnLWlucHV0LWRyb3Bkb3duLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFRhZ01vZGVsIH0gZnJvbSAnLi9jb3JlL3RhZy1tb2RlbCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhZ0lucHV0T3B0aW9ucyB7XHJcbiAgICBzZXBhcmF0b3JLZXlzOiBzdHJpbmdbXTtcclxuICAgIHNlcGFyYXRvcktleUNvZGVzOiBudW1iZXJbXTtcclxuICAgIG1heEl0ZW1zOiBudW1iZXI7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgc2Vjb25kYXJ5UGxhY2Vob2xkZXI6IHN0cmluZztcclxuICAgIHZhbGlkYXRvcnM6IFZhbGlkYXRvckZuW107XHJcbiAgICBhc3luY1ZhbGlkYXRvcnM6IEFzeW5jVmFsaWRhdG9yRm5bXTtcclxuICAgIG9ubHlGcm9tQXV0b2NvbXBsZXRlOiBib29sZWFuO1xyXG4gICAgZXJyb3JNZXNzYWdlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH07XHJcbiAgICB0aGVtZTogJyc7XHJcbiAgICBvblRleHRDaGFuZ2VEZWJvdW5jZTogbnVtYmVyO1xyXG4gICAgaW5wdXRJZDogc3RyaW5nIHwgbnVsbDtcclxuICAgIGlucHV0Q2xhc3M6IHN0cmluZztcclxuICAgIGNsZWFyT25CbHVyOiBib29sZWFuO1xyXG4gICAgaGlkZUZvcm06IGJvb2xlYW47XHJcbiAgICBhZGRPbkJsdXI6IGJvb2xlYW47XHJcbiAgICBhZGRPblBhc3RlOiBib29sZWFuO1xyXG4gICAgcGFzdGVTcGxpdFBhdHRlcm46IHN0cmluZyB8IFJlZ0V4cDtcclxuICAgIGJsaW5rSWZEdXBlOiBib29sZWFuO1xyXG4gICAgcmVtb3ZhYmxlOiBib29sZWFuO1xyXG4gICAgZWRpdGFibGU6IGJvb2xlYW47XHJcbiAgICBhbGxvd0R1cGVzOiBib29sZWFuO1xyXG4gICAgbW9kZWxBc1N0cmluZ3M6IGJvb2xlYW47XHJcbiAgICB0cmltVGFnczogYm9vbGVhbjtcclxuICAgIHJpcHBsZTogYm9vbGVhbjtcclxuICAgIHRhYkluZGV4OiBzdHJpbmc7XHJcbiAgICBkaXNhYmxlOiBib29sZWFuO1xyXG4gICAgZHJhZ1pvbmU6IHN0cmluZztcclxuICAgIG9uUmVtb3Zpbmc/OiAodGFnOiBUYWdNb2RlbCkgPT4gT2JzZXJ2YWJsZTxUYWdNb2RlbD47XHJcbiAgICBvbkFkZGluZz86ICh0YWc6IFRhZ01vZGVsKSA9PiBPYnNlcnZhYmxlPFRhZ01vZGVsPjtcclxuICAgIGRpc3BsYXlCeTogc3RyaW5nO1xyXG4gICAgaWRlbnRpZnlCeTogc3RyaW5nO1xyXG4gICAgYW5pbWF0aW9uRHVyYXRpb246IHtcclxuICAgICAgICBlbnRlcjogc3RyaW5nLFxyXG4gICAgICAgIGxlYXZlOiBzdHJpbmdcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVGFnSW5wdXREcm9wZG93bk9wdGlvbnMge1xyXG4gICAgZGlzcGxheUJ5OiBzdHJpbmc7XHJcbiAgICBpZGVudGlmeUJ5OiBzdHJpbmc7XHJcbiAgICBhcHBlbmRUb0JvZHk6IGJvb2xlYW47XHJcbiAgICBvZmZzZXQ6IHN0cmluZztcclxuICAgIGZvY3VzRmlyc3RFbGVtZW50OiBib29sZWFuO1xyXG4gICAgc2hvd0Ryb3Bkb3duSWZFbXB0eTogYm9vbGVhbjtcclxuICAgIG1pbmltdW1UZXh0TGVuZ3RoOiBudW1iZXI7XHJcbiAgICBsaW1pdEl0ZW1zVG86IG51bWJlcjtcclxuICAgIGtlZXBPcGVuOiBib29sZWFuO1xyXG4gICAgekluZGV4OiBudW1iZXI7XHJcbiAgICBkeW5hbWljVXBkYXRlOiBib29sZWFuO1xyXG4gICAgbWF0Y2hpbmdGbjogKHZhbHVlOiBzdHJpbmcsIHRhcmdldDogVGFnTW9kZWwpID0+IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkZWZhdWx0cyA9IHtcclxuICAgIHRhZ0lucHV0OiA8VGFnSW5wdXRPcHRpb25zPntcclxuICAgICAgICBzZXBhcmF0b3JLZXlzOiBbXSxcclxuICAgICAgICBzZXBhcmF0b3JLZXlDb2RlczogW10sXHJcbiAgICAgICAgbWF4SXRlbXM6IEluZmluaXR5LFxyXG4gICAgICAgIHBsYWNlaG9sZGVyOiBQTEFDRUhPTERFUixcclxuICAgICAgICBzZWNvbmRhcnlQbGFjZWhvbGRlcjogU0VDT05EQVJZX1BMQUNFSE9MREVSLFxyXG4gICAgICAgIHZhbGlkYXRvcnM6IFtdLFxyXG4gICAgICAgIGFzeW5jVmFsaWRhdG9yczogW10sXHJcbiAgICAgICAgb25seUZyb21BdXRvY29tcGxldGU6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yTWVzc2FnZXM6IHt9LFxyXG4gICAgICAgIHRoZW1lOiAnJyxcclxuICAgICAgICBvblRleHRDaGFuZ2VEZWJvdW5jZTogMjUwLFxyXG4gICAgICAgIGlucHV0SWQ6IG51bGwsXHJcbiAgICAgICAgaW5wdXRDbGFzczogJycsXHJcbiAgICAgICAgY2xlYXJPbkJsdXI6IGZhbHNlLFxyXG4gICAgICAgIGhpZGVGb3JtOiBmYWxzZSxcclxuICAgICAgICBhZGRPbkJsdXI6IGZhbHNlLFxyXG4gICAgICAgIGFkZE9uUGFzdGU6IGZhbHNlLFxyXG4gICAgICAgIHBhc3RlU3BsaXRQYXR0ZXJuOiAnLCcsXHJcbiAgICAgICAgYmxpbmtJZkR1cGU6IHRydWUsXHJcbiAgICAgICAgcmVtb3ZhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICBhbGxvd0R1cGVzOiBmYWxzZSxcclxuICAgICAgICBtb2RlbEFzU3RyaW5nczogZmFsc2UsXHJcbiAgICAgICAgdHJpbVRhZ3M6IHRydWUsXHJcbiAgICAgICAgcmlwcGxlOiB0cnVlLFxyXG4gICAgICAgIHRhYkluZGV4OiAnJyxcclxuICAgICAgICBkaXNhYmxlOiBmYWxzZSxcclxuICAgICAgICBkcmFnWm9uZTogJycsXHJcbiAgICAgICAgb25SZW1vdmluZzogdW5kZWZpbmVkLFxyXG4gICAgICAgIG9uQWRkaW5nOiB1bmRlZmluZWQsXHJcbiAgICAgICAgZGlzcGxheUJ5OiAnZGlzcGxheScsXHJcbiAgICAgICAgaWRlbnRpZnlCeTogJ3ZhbHVlJyxcclxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjoge1xyXG4gICAgICAgICAgICBlbnRlcjogJzI1MG1zJyxcclxuICAgICAgICAgICAgbGVhdmU6ICcxNTBtcydcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZHJvcGRvd246IDxUYWdJbnB1dERyb3Bkb3duT3B0aW9ucz57XHJcbiAgICAgICAgZGlzcGxheUJ5OiAnZGlzcGxheScsXHJcbiAgICAgICAgaWRlbnRpZnlCeTogJ3ZhbHVlJyxcclxuICAgICAgICBhcHBlbmRUb0JvZHk6IHRydWUsXHJcbiAgICAgICAgb2Zmc2V0OiAnNTAgMCcsXHJcbiAgICAgICAgZm9jdXNGaXJzdEVsZW1lbnQ6IGZhbHNlLFxyXG4gICAgICAgIHNob3dEcm9wZG93bklmRW1wdHk6IGZhbHNlLFxyXG4gICAgICAgIG1pbmltdW1UZXh0TGVuZ3RoOiAxLFxyXG4gICAgICAgIGxpbWl0SXRlbXNUbzogSW5maW5pdHksXHJcbiAgICAgICAga2VlcE9wZW46IHRydWUsXHJcbiAgICAgICAgZHluYW1pY1VwZGF0ZTogdHJ1ZSxcclxuICAgICAgICB6SW5kZXg6IDEwMDAsXHJcbiAgICAgICAgbWF0Y2hpbmdGblxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIG1hdGNoaW5nRm5cclxuICogQHBhcmFtIHRoaXNcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEBwYXJhbSB0YXJnZXRcclxuICovXHJcbmZ1bmN0aW9uIG1hdGNoaW5nRm4odGhpczogVGFnSW5wdXREcm9wZG93biwgdmFsdWU6IHN0cmluZywgdGFyZ2V0OiBUYWdNb2RlbCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgdGFyZ2V0VmFsdWUgPSB0YXJnZXRbdGhpcy5kaXNwbGF5QnldLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgcmV0dXJuIHRhcmdldFZhbHVlICYmIHRhcmdldFZhbHVlXHJcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAuaW5kZXhPZih2YWx1ZS50b0xvd2VyQ2FzZSgpKSA+PSAwO1xyXG59XHJcbiJdfQ==